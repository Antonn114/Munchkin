#ifndef __MUNCHKIN_BITBOARD_H__
#define __MUNCHKIN_BITBOARD_H__

// mapping: LERF

#include "defs.h"

enum enumSquare {
  a1 = 0,
  b1,
  c1,
  d1,
  e1,
  f1,
  g1,
  h1,
  a2,
  b2,
  c2,
  d2,
  e2,
  f2,
  g2,
  h2,
  a3,
  b3,
  c3,
  d3,
  e3,
  f3,
  g3,
  h3,
  a4,
  b4,
  c4,
  d4,
  e4,
  f4,
  g4,
  h4,
  a5,
  b5,
  c5,
  d5,
  e5,
  f5,
  g5,
  h5,
  a6,
  b6,
  c6,
  d6,
  e6,
  f6,
  g6,
  h6,
  a7,
  b7,
  c7,
  d7,
  e7,
  f7,
  g7,
  h7,
  a8,
  b8,
  c8,
  d8,
  e8,
  f8,
  g8,
  h8
};

const U64 A_FILE = 0x0101010101010101;
const U64 H_FILE = 0x8080808080808080;
const U64 F_RANK = 0x00000000000000FF;
const U64 E_RANK = 0xFF00000000000000;
const U64 DIAGONAL = 0x8040201008040201;
const U64 ANTI_DIAG = 0x0102040810204080;
const U64 LIGHT_SQ = 0x55AA55AA55AA55AA;
const U64 DARK_SQ = 0xAA55AA55AA55AA55;
const U64 UNIVERSE = 0xFFFFFFFFFFFFFFFF;

// PIECE ATTACK MASKS

extern U64 nort_attacks[64], sout_attacks[64], east_attacks[64],
    west_attacks[64];
extern U64 nowe_attacks[64], noea_attacks[64], sowe_attacks[64],
    soea_attacks[64];
extern U64 rank_attacks[64], file_attacks[64], diag_attacks[64],
    antidiag_attacks[64];
extern U64 rook_attacks[64], bishop_attacks[64], queen_attacks[64];

void init_attack_masks();

// MAGIC BITBOARD

U64 get_rook_attacks(U64 occ, U8 sq);
U64 get_bishop_attacks(U64 occ, U8 sq);
U64 get_queen_attacks(U64 occ, U8 sq);
void init_magic();

// OTHER PIECES ATTACK PATTERNS

extern U64 knight_attacks[64], king_attacks[64], pawn_attacks[2][64];
void init_other_attacks();

U64 opponent_slider_to_king(int Esq, int Ksq);

inline U8 flipped_square(U8 sq) { return ((7 - (sq >> 3)) << 3) | (sq & 7); }

// Garbo

const U64 RMagic[64] = {
    0xa8002c000108020ULL,  0x6c00049b0002001ULL,  0x100200010090040ULL,
    0x2480041000800801ULL, 0x280028004000800ULL,  0x900410008040022ULL,
    0x280020001001080ULL,  0x2880002041000080ULL, 0xa000800080400034ULL,
    0x4808020004000ULL,    0x2290802004801000ULL, 0x411000d00100020ULL,
    0x402800800040080ULL,  0xb000401004208ULL,    0x2409000100040200ULL,
    0x1002100004082ULL,    0x22878001e24000ULL,   0x1090810021004010ULL,
    0x801030040200012ULL,  0x500808008001000ULL,  0xa08018014000880ULL,
    0x8000808004000200ULL, 0x201008080010200ULL,  0x801020000441091ULL,
    0x800080204005ULL,     0x1040200040100048ULL, 0x120200402082ULL,
    0xd14880480100080ULL,  0x12040280080080ULL,   0x100040080020080ULL,
    0x9020010080800200ULL, 0x813241200148449ULL,  0x491604001800080ULL,
    0x100401000402001ULL,  0x4820010021001040ULL, 0x400402202000812ULL,
    0x209009005000802ULL,  0x810800601800400ULL,  0x4301083214000150ULL,
    0x204026458e001401ULL, 0x40204000808000ULL,   0x8001008040010020ULL,
    0x8410820820420010ULL, 0x1003001000090020ULL, 0x804040008008080ULL,
    0x12000810020004ULL,   0x1000100200040208ULL, 0x430000a044020001ULL,
    0x280009023410300ULL,  0xe0100040002240ULL,   0x200100401700ULL,
    0x2244100408008080ULL, 0x8000400801980ULL,    0x2000810040200ULL,
    0x8010100228810400ULL, 0x2000009044210200ULL, 0x4080008040102101ULL,
    0x40002080411d01ULL,   0x2005524060000901ULL, 0x502001008400422ULL,
    0x489a000810200402ULL, 0x1004400080a13ULL,    0x4000011008020084ULL,
    0x26002114058042ULL,
};

const U64 BMagic[64] = {
    0x89a1121896040240ULL, 0x2004844802002010ULL, 0x2068080051921000ULL,
    0x62880a0220200808ULL, 0x4042004000000ULL,    0x100822020200011ULL,
    0xc00444222012000aULL, 0x28808801216001ULL,   0x400492088408100ULL,
    0x201c401040c0084ULL,  0x840800910a0010ULL,   0x82080240060ULL,
    0x2000840504006000ULL, 0x30010c4108405004ULL, 0x1008005410080802ULL,
    0x8144042209100900ULL, 0x208081020014400ULL,  0x4800201208ca00ULL,
    0xf18140408012008ULL,  0x1004002802102001ULL, 0x841000820080811ULL,
    0x40200200a42008ULL,   0x800054042000ULL,     0x88010400410c9000ULL,
    0x520040470104290ULL,  0x1004040051500081ULL, 0x2002081833080021ULL,
    0x400c00c010142ULL,    0x941408200c002000ULL, 0x658810000806011ULL,
    0x188071040440a00ULL,  0x4800404002011c00ULL, 0x104442040404200ULL,
    0x511080202091021ULL,  0x4022401120400ULL,    0x80c0040400080120ULL,
    0x8040010040820802ULL, 0x480810700020090ULL,  0x102008e00040242ULL,
    0x809005202050100ULL,  0x8002024220104080ULL, 0x431008804142000ULL,
    0x19001802081400ULL,   0x200014208040080ULL,  0x3308082008200100ULL,
    0x41010500040c020ULL,  0x4012020c04210308ULL, 0x208220a202004080ULL,
    0x111040120082000ULL,  0x6803040141280a00ULL, 0x2101004202410000ULL,
    0x8200000041108022ULL, 0x21082088000ULL,      0x2410204010040ULL,
    0x40100400809000ULL,   0x822088220820214ULL,  0x40808090012004ULL,
    0x910224040218c9ULL,   0x402814422015008ULL,  0x90014004842410ULL,
    0x1000042304105ULL,    0x10008830412a00ULL,   0x2520081090008908ULL,
    0x40102000a0a60140ULL,
};

const int RBits[64] = {12, 11, 11, 11, 11, 11, 11, 12, 11, 10, 10, 10, 10,
                       10, 10, 11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10,
                       10, 10, 10, 10, 10, 11, 11, 10, 10, 10, 10, 10, 10,
                       11, 11, 10, 10, 10, 10, 10, 10, 11, 11, 10, 10, 10,
                       10, 10, 10, 11, 12, 11, 11, 11, 11, 11, 11, 12};

const int BBits[64] = {6, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 5, 5,
                       5, 5, 7, 7, 7, 7, 5, 5, 5, 5, 7, 9, 9, 7, 5, 5,
                       5, 5, 7, 9, 9, 7, 5, 5, 5, 5, 7, 7, 7, 7, 5, 5,
                       5, 5, 5, 5, 5, 5, 5, 5, 6, 5, 5, 5, 5, 5, 5, 6};

#endif  // !__MUNCHKIN_BITBOARD_H__
